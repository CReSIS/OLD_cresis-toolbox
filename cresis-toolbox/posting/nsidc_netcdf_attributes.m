function nsidc_netcdf_attributes(in_nc_fn,mat_fn,param);
% nsidc_netcdf_attributes(in_nc_fn,mat_fn,param);
%
% This function adds global attributes, variable attributes into an exising
% netcdf file.
% Called from nsidc_delivery_script.m
%
% in_nc_fn:     The input .nc filename
% mat_fn
% update_nc_fn: Updated .nc file wirh desired filename in convention
%
% Authors: Yi Zhu, John Paden
%
% See also: type "nsidc_help.m"

%% Obtain the ncid of the netcdf file
ncid = netcdf.open(in_nc_fn,'WRITE');
fileattrib(in_nc_fn,'+w');
varid = netcdf.getConstant('GLOBAL');
% in_nc_fn = 'test.nc'
% ncid = netcdf.create(in_nc_fn,bitor(netcdf.getConstant('CLOBBER'),netcdf.getConstant('NETCDF4')))


%% Obtain global attribute information from spread sheet (need to change)
data = load(mat_fn);
[~,name,ext] = fileparts(in_nc_fn);
fn = [name, ext];


sensor_type = ct_output_dir(param.radar_name);

physical_constants;

if isfield(data,'param_qlook')
  proc_param = data.param_qlook;
else
  proc_param = data.param_sar;
  if ~isfield(proc_param,'sw_version')
    %% Legacy file format fix
    proc_param.sw_version = proc_param.csarp.sw_version;
  end
  if ~isfield(data,'param_array')
    %% Legacy file format fix
    data.param_array.array = data.param_array_wf_chan;
    data.param_array.array.rline_rng = data.param_array_wf_chan.array.lineRng;
    data.param_array.array.bin_rng = data.param_array_wf_chan.array.binRng;
  end
end

%% Writing glocal attribute into netcdf file
%% General information
% netcdf.putAtt(ncid,varid,'featureType','timeSeries');
parse_season_name = regexp(param.season_name, '_','split');

if strcmpi(parse_season_name{3},'P3')
  if strcmpi(param.season_name,'2016_Greenland_P3')
    netcdf.putAtt(ncid,varid,'location','NOAAP3');
  else
    netcdf.putAtt(ncid,varid,'location','NASAP3');
  end
elseif strcmpi(parse_season_name{3},'P3chile')
  netcdf.putAtt(ncid,varid,'location','CHILEP3');
elseif strcmpi(parse_season_name{3},'DC8')
  netcdf.putAtt(ncid,varid,'location','NASADC8');
elseif strcmpi(parse_season_name{3},'TO')
  netcdf.putAtt(ncid,varid,'location','KBATO');
elseif strcmpi(parse_season_name{3},'TOnrl')
  netcdf.putAtt(ncid,varid,'location','NRLTO');
elseif strcmpi(parse_season_name{3},'C130')
  netcdf.putAtt(ncid,varid,'location','NASAC130');
elseif strcmpi(parse_season_name{3},'Basler')
  netcdf.putAtt(ncid,varid,'location','NASABasler');
elseif strcmpi(parse_season_name{3},'SO')
  netcdf.putAtt(ncid,varid,'location','UltraThuleSO');
elseif strcmpi(parse_season_name{3},'GV')
  netcdf.putAtt(ncid,varid,'location','NASAGV');
else
  error('Platform not supported');
end
netcdf.putAtt(ncid,varid,'source','airborne ice penetrating radar');
data_version_string = sprintf('SVNr%d_%s', ...
  proc_param.sw_version.rev, ...
  datestr(datenum(proc_param.sw_version.cur_date_time),'yyyymmddHHMMSS'));
netcdf.putAtt(ncid,varid,'data_version',data_version_string);
netcdf.putAtt(ncid,varid,'positioning',data.param_records.gps_source);
netcdf.putAtt(ncid,varid,'title',sprintf('IceBridge CReSIS %s%s L1B Echo Strength Profile', ...
  char(param.radar_name(1)-32), param.radar_name(2:end)));
netcdf.putAtt(ncid,varid,'granule_id',sprintf('%s', fn));
netcdf.putAtt(ncid,varid,'instrument',param.radar_name);
netcdf.putAtt(ncid,varid,'institution',['Center for Remote Sensing of Ice Sheets',char(10)',...
  'University of Kansas']);
netcdf.putAtt(ncid,varid,'funding','This line was funded as part of NASA');
if any(strcmpi(param.season_name,{'2006_Greenland_TO','2007_Greenland_P3', ...
    '2008_Greenland_TO','2009_Greenland_TO'}))
  netcdf.putAtt(ncid,varid,'investigators','P. Gogineni, C. Allen, C.Leuschen, J. Paden, F. Rodriguez');
elseif any(strcmpi(param.season_name,{'2009_Greenland_P3','2009_Antarctica_DC8', ...
    '2010_Greenland_DC8','2010_Greenland_P3','2010_Antarctica_DC8', ...
    '2011_Greenland_P3','2011_Antarctica_DC8','2012_Greenland_P3', ...
    '2012_Antarctica_DC8'}))
  netcdf.putAtt(ncid,varid,'investigators','C.Leuschen, C. Allen, R. Hale, J. Paden, F. Rodriguez');
elseif any(strcmpi(param.season_name,{'2013_Greenland_P3','2013_Antarctica_P3',...
    '2014_Greenland_P3','2014_Antarctica_DC8','2015_Greenland_C130',...
    '2016_Greenland_P3','2016_Antarctica_DC8','2017_Greenland_P3','2017_Antarctica_P3','2017_Antarctica_Basler',...
    '2018_Greenland_P3','2018_Alaska_SO','2018_Antarctica_DC8',...
    '2019_Greenland_P3','2019_Arctic_GV','2019_Antarctica_GV'}))
  netcdf.putAtt(ncid,varid,'investigators','C.Leuschen, R. Hale, J. Li, J. Paden, F. Rodriguez');
else
  error('Unsupported season\n');
end
netcdf.putAtt(ncid,varid,'history',datestr(now));

netcdf.putAtt(ncid,varid,'max_latitude_bound',max(data.Latitude));
netcdf.putAtt(ncid,varid,'min_latitude_bound',min(data.Latitude));
netcdf.putAtt(ncid,varid,'max_longitude_bound',max(data.Longitude));
netcdf.putAtt(ncid,varid,'min_longitude_bound',min(data.Longitude));

netcdf.putAtt(ncid,varid,'min_time_bound', ...
  sprintf('%s GPS', datestr(epoch_to_datenum(min(data.GPS_time)),'yyyymmddTHH:MM:SS')));
netcdf.putAtt(ncid,varid,'max_time_bound', ...
  sprintf('%s GPS', datestr(epoch_to_datenum(max(data.GPS_time)),'yyyymmddTHH:MM:SS')));

%% For RF parameters
if any(strcmp(sensor_type,{'accum','rds'}))
  wf = 1;
  f0 = proc_param.radar.wfs(wf).f0;
  f1 = proc_param.radar.wfs(wf).f1;
  fc = (f0+f1)/2;
elseif any(strcmp(sensor_type,{'kuband','snow'}))
  wf = 1;
  f0 = proc_param.radar.wfs(wf).f0 * proc_param.radar.wfs(1).fmult + proc_param.radar.wfs(1).fLO;
  f1 = proc_param.radar.wfs(wf).f1 * proc_param.radar.wfs(1).fmult + proc_param.radar.wfs(1).fLO;
  fc = (f0+f1)/2;
end

lambda = c/fc;
Pt = sum(proc_param.radar.wfs(1).tx_weights);

rfparams_val = sprintf('RF PARAMETERS\n');
rfparams_val = cat(2,rfparams_val, ...
  sprintf('Center Frequency: %.1f MHz\n', fc/1e6));
rfparams_val = cat(2,rfparams_val, ...
  sprintf('Center Wavelength in Air: %.3f m\n', lambda));
rfparams_val = cat(2,rfparams_val, ...
  sprintf('Peak power: %.0f dBm\n', 10*log10(Pt)));

pulse_time = 0;
total_presums = 0;
rfparams_val = cat(2,rfparams_val, ...
  sprintf('Chirp: '));
for wf = 1:length(proc_param.radar.wfs)
  rfparams_val = cat(2,rfparams_val, ...
    sprintf('wf %d: %.3f MHz to %.3f MHz, %.3f microsecond, linear FM', ...
    wf, f0/1e6, f1/1e6, ...
    proc_param.radar.wfs(wf).Tpd*1e6));
  if wf < length(proc_param.radar.wfs)
    rfparams_val = cat(2,rfparams_val, '; ');
  end
  pulse_time = pulse_time + param.records.settings.wfs(wf).presums * proc_param.radar.wfs(wf).Tpd;
  total_presums = total_presums + param.records.settings.wfs(wf).presums;
end
rfparams_val = cat(2,rfparams_val, ...
  sprintf('\n'));
pulse_time = pulse_time / total_presums;
duty_cycle = pulse_time * proc_param.radar.prf;
rfparams_val = cat(2,rfparams_val, ...
  sprintf('PRF: %.0f Hz\n', proc_param.radar.prf));
rfparams_val = cat(2,rfparams_val, ...
  sprintf('TX duty cycle: %.2f percent\n', duty_cycle*100));

if strcmp(sensor_type,'accum')
  if any(strcmpi(param.season_name,{'2010_Greenland_P3', ...
    '2011_Greenland_P3','2012_Greenland_P3', ...
    '2013_Greenland_P3', '2013_Antarctica_P3', ...
    '2014_Greenland_P3'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitter: 1 GSPS DDS, 5 W\n'));
  elseif any(strcmpi(param.season_name,{'2017_Greenland_P3','2017_Antarctica_P3','2018_Greenland_P3'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitter: 2.4 GSPS AWG, 400 W\n'));
  else
    error('Unsupported season\n');
  end
elseif strcmp(sensor_type,'kuband')
  if any(strcmpi(param.season_name,{'2009_Antarctica_DC8', ...
    '2010_Greenland_DC8','2010_Greenland_P3','2010_Antarctica_DC8', ...
    '2011_Greenland_P3','2011_Antarctica_DC8'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitter: DDS with 56x frequency multiplier, 0.1 W\n'));
  elseif any(strcmpi(param.season_name,{'2012_Greenland_P3', ...
    '2012_Antarctica_DC8','2013_Greenland_P3', '2013_Antarctica_P3', ...
    '2014_Greenland_P3','2014_Antarctica_DC8','2015_Greenland_C130','2016_Greenland_P3','2016_Antarctica_DC8'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitter: DDS with 20x frequency multiplier, 0.1 W\n'));
  else
    error('Unsupported season\n');
  end
elseif strcmp(sensor_type,'rds')
  if any(strcmpi(param.season_name,{'2009_Antarctica_DC8'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitters: 5-channel DDS with phase/amplitude control, 150W SSPA per channel\n'));
  elseif any(strcmpi(param.season_name,{'2010_Greenland_P3'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitters: 7-channel DDS with phase/amplitude control, 150W SSPA per channel\n'));
  elseif any(strcmpi(param.season_name,{'2010_Greenland_DC8'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitters: 5-channel DDS with phase/amplitude control, 150W SSPA per channel\n'));
  elseif any(strcmpi(param.season_name,{'2010_Antarctica_DC8'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitters: 5-channel DDS with phase/amplitude control, 150W SSPA per channel\n'));
  elseif any(strcmpi(param.season_name,{'2011_Greenland_P3'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitters: 7-channel DDS with phase/amplitude control, 150W SSPA per channel\n'));
  elseif any(strcmpi(param.season_name,{'2011_Antarctica_DC8'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitters: 5-channel DDS with phase/amplitude control, 150W SSPA per channel\n'));
  elseif any(strcmpi(param.season_name,{'2012_Greenland_P3'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitters: 7-channel DDS with phase/amplitude control, 150W SSPA per channel\n'));
  elseif any(strcmpi(param.season_name,{'2012_Antarctica_DC8'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitters: 5-channel DDS with phase/amplitude control, 150W SSPA per channel\n'));
  elseif any(strcmpi(param.season_name,{'2013_Greenland_P3'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitters: 7-channel DDS with phase/amplitude control, 150W SSPA per channel\n'));
  elseif any(strcmpi(param.season_name,{'2013_Antarctica_P3'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitters: 7-channel DDS with phase/amplitude control, 300W SSPA per channel\n'));
  elseif any(strcmpi(param.season_name,{'2014_Greenland_P3'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitters: 7-channel DDS with phase/amplitude control, 300W SSPA per channel\n'));
  elseif any(strcmpi(param.season_name,{'2014_Antarctica_DC8','2016_Antarctica_DC8','2018_Antarctica_DC8'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitters: 6-channel DDS with phase/amplitude control, 1000W SSPA per channel\n'));
  elseif any(strcmpi(param.season_name,{'2015_Greenland_C130'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitters: 2-channel DDS with phase/amplitude control, 500W SSPA per channel\n'));
  elseif any(strcmpi(param.season_name,{'2016_Greenland_P3'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitters: 2-channel DDS with phase/amplitude control, 250W SSPA per channel\n'));
  elseif any(strcmpi(param.season_name,{'2017_Greenland_P3','2017_Antarctica_P3','2018_Greenland_P3'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitters: 7-channel DDS with phase/amplitude control, 500W SSPA per channel\n'));
  elseif any(strcmpi(param.season_name,{'2017_Antarctica_Basler'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitters: 8-channel DDS with phase/amplitude control, 225W SSPA per channel\n'));
  elseif any(strcmpi(param.season_name,{'2019_Antarctica_GV'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitters: 4-channel DDS with phase/amplitude control, 500W SSPA per channel\n'));
  else
    error('Unsupported season\n');
  end
elseif strcmp(sensor_type,'snow')
  if any(strcmpi(param.season_name,{'2009_Greenland_P3','2009_Antarctica_DC8', ...
    '2010_Greenland_DC8','2010_Greenland_P3','2010_Antarctica_DC8', ...
    '2011_Greenland_P3','2011_Antarctica_DC8'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitter: DDS with 56x frequency multiplier, 0.1 W\n'));
  elseif any(strcmpi(param.season_name,{'2012_Greenland_P3', ...
    '2012_Antarctica_DC8','2013_Greenland_P3', '2013_Antarctica_P3', ...
    '2014_Greenland_P3','2014_Antarctica_DC8','2015_Greenland_C130','2016_Greenland_P3','2016_Antarctica_DC8'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitter: DDS with 20x frequency multiplier, 0.1 W\n'));
  elseif any(strcmpi(param.season_name,{'2017_Greenland_P3','2017_Antarctica_P3'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitter: Keysight M8195A AWG 65 GSPS, 0.1 W, 2-18 GHz\n'));
  elseif any(strcmpi(param.season_name,{'2018_Greenland_P3','2018_Antarctica_DC8','2019_Greenland_P3','2019_Arctic_GV','2019_Antarctica_GV'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitter: Keysight M8195A AWG 65 GSPS, 1 W, 2-18 GHz\n'));
  elseif any(strcmpi(param.season_name,{'2018_Alaska_SO'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmitter: DDS with 20x frequency multiplier, 1 W\n'));
  else
    error('Unsupported season\n');
  end
end

rfparams_val = cat(2,rfparams_val, ...
  sprintf('Receiver path: '));
for wf = 1:length(proc_param.radar.wfs)
  rfparams_val = cat(2,rfparams_val, ...
    sprintf('wf %d: %.1f dB gain; ', wf, proc_param.radar.wfs(wf).adc_gains_dB(1)));
end
rfparams_val = cat(2,rfparams_val, ...
  sprintf('\n'));

if strcmp(sensor_type,'accum')
  if any(strcmpi(param.season_name,{'2010_Greenland_P3', ...
      '2011_Greenland_P3','2012_Greenland_P3', ...
      '2013_Greenland_P3', '2013_Antarctica_P3', ...
      '2014_Greenland_P3'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Single channel mode: all antennas used for tx and rx\n'));
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Multichannel channel mode: outer elements used for tx, all elements used for rx\n'));
  elseif any(strcmpi(param.season_name,{'2017_Greenland_P3','2017_Antarctica_P3'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Multichannel: Forward 4 elements tx with power splitter, aft 4 elements used for rx with individual channels digitized\n'));
  elseif any(strcmpi(param.season_name,{'2018_Greenland_P3'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Single channel mode: all 8 elements tx combined with a power combiner, all 8 elements used for rx with individual channels combined to be digitized\n'));
  else
    error('Unsupported season\n');
  end
elseif strcmp(sensor_type,'rds')
  if any(strcmpi(param.season_name,{'2010_Greenland_P3','2011_Greenland_P3','2012_Greenland_P3','2013_Antarctica_P3','2014_Greenland_P3','2017_Greenland_P3','2017_Antarctica_P3','2018_Greenland_P3'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('TX/RX mode: Channels 1-7 are Tx/Rx (center elements), Channels 8-15 are Rx only (wing elements)\n'));
  elseif any(strcmpi(param.season_name,{'2013_Greenland_P3','2019_Greenland_P3'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('TX/RX mode: Channels 1-7 are Tx/Rx (center elements), Channels 8-15 not installed (wing elements)\n'));
  elseif any(strcmpi(param.season_name,{'2015_Greenland_C130'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('TX/RX mode: Channels 1-2 are Tx/Rx (center elements at nose port), no wing elements\n'));
  elseif any(strcmpi(param.season_name,{'2016_Greenland_P3'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('TX/RX mode: Channels 1-2 are Tx/Rx (center elements)\n'));
  elseif any(strcmpi(param.season_name,{'2009_Antarctica_DC8','2010_Greenland_DC8','2010_Antarctica_DC8','2011_Antarctica_DC8','2012_Antarctica_DC8'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('TX/RX mode: Channels 1-5 are Tx/Rx (center elements)\n'));
  elseif any(strcmpi(param.season_name,{'2014_Antarctica_DC8','2016_Antarctica_DC8','2018_Antarctica_DC8'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('TX/RX mode: Channels 1-6 are Tx/Rx (center elements)\n'));
  elseif any(strcmpi(param.season_name,{'2017_Antarctica_Basler'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('TX/RX mode: Channels 1-8 are Tx/Rx (installed under fuselage)\n'));
  elseif any(strcmpi(param.season_name,{'2019_Antarctica_GV'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('TX/RX mode: Channels 1-4 are Tx/Rx (installed under fuselage)\n'));
  else
    error('Unsupported season\n');
  end
elseif any(strcmp(sensor_type,{'kuband','snow'}))
  if any(strcmpi(param.season_name,{'2009_Antarctica_DC8', ...
      '2010_Greenland_DC8','2010_Antarctica_DC8', ...
      '2011_Antarctica_DC8', ...
      '2012_Antarctica_DC8', ...
      '2014_Antarctica_DC8','2015_Greenland_C130','2016_Antarctica_DC8','2018_Antarctica_DC8','2019_Arctic_GV','2019_Antarctica_GV'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmit out of left antenna, receive from right antenna\n'));
  elseif any(strcmpi(param.season_name,{'2009_Greenland_P3','2010_Greenland_P3',...
      '2011_Greenland_P3','2012_Greenland_P3', ...
      '2013_Greenland_P3', '2013_Antarctica_P3', ...
      '2014_Greenland_P3','2017_Greenland_P3','2017_Antarctica_P3','2018_Greenland_P3','2018_Alaska_SO','2019_Greenland_P3'}))
    rfparams_val = cat(2,rfparams_val, ...
      sprintf('Transmit out of forward antenna, receive from aft antenna\n'));
  elseif any(strcmpi(param.season_name,{'2016_Greenland_P3'}))
      if any(strcmp(sensor_type,{'kuband'}))
          rfparams_val = cat(2,rfparams_val, ...
              sprintf('Transmit out of left antenna, receive from right antenna\n'));
      elseif any(strcmp(sensor_type,{'snow'}))
          rfparams_val = cat(2,rfparams_val, ...
              sprintf('Transmit out of aft antenna, receive from front antenna\n'));
      end
  else
    error('Unsupported season\n');
  end
end

rfparams_val = cat(2,rfparams_val, ...
  sprintf('Transmitter manufacturers: CReSIS\n'));
rfparams_val = cat(2,rfparams_val, ...
  sprintf('Receiver manufacturers: CReSIS'));

netcdf.putAtt(ncid,varid,'rfparams',rfparams_val);

%% For digital parameters
digparams_val = sprintf('DIGITAL PARAMETERS\n');
digparams_val = cat(2,digparams_val, ...
  sprintf('Record Duration: %d microseconds', 1e6*(data.Time(end)-data.Time(1))));
digparams_val = cat(2,digparams_val, ...
  sprintf('Sample rate: %d MHz (actual sample rate maybe higher than this)', 1e-6/(data.Time(end)-data.Time(1))));
if strcmp(sensor_type,'accum')
  if any(strcmpi(param.season_name,{'2009_Greenland_P3', ...
      '2010_Greenland_P3', ...
      '2011_Greenland_P3'}))
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer maximum range: 2 volt peak to peak; 10 dBm max power'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Record rate: variable'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Channels: 1 or 4\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer: Analog Devices Evaluation Board 9640 150 MSPS\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitization: 8 bits, stacked into 16 bit register (lowest bits dropped)\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Data rate: variable\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitization dynamic range perchannel (as power): 96.3 dB\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer platform: Linux PC running IDL application\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer manufacturer: Analog Devices and Custom'));
  elseif any(strcmpi(param.season_name,{'2012_Greenland_P3', ...
      '2013_Greenland_P3', '2013_Antarctica_P3', ...
      '2014_Greenland_P3'}))
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer maximum range: 1 volt peak to peak; 4 dBm max power'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Record rate: variable'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Channels: 1 or 4\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer: Sundance SMT702 3.0 GSPS ADC\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitization: 8 bits, stacked into 16 bit register (lowest bits dropped)\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Data rate: variable\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitization dynamic range perchannel (as power): 96.3 dB\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer platform: NI PXIe Windows PC running LabView\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer manufacturer: National Instruments/Sundance'));
  elseif any(strcmpi(param.season_name,{'2017_Greenland_P3','2017_Antarctica_P3','2018_Greenland_P3'}))
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer maximum range: 2 volt peak to peak; 10 dBm max power'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Record rate: variable'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Channels: 1 or 4\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer: National Instruments NI-5772 1.6 GSPS ADC\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitization: 12 bits, stacked into 16 bit register (lowest bits dropped)\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Data rate: variable\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitization dynamic range perchannel (as power): 96.3 dB\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer platform: NI PXIe Windows PC running LabView\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer manufacturer: National Instruments'));
  else
    error('Unsupported season\n');
  end
elseif strcmp(sensor_type,'rds')
  if any(strcmpi(param.season_name,{'2009_Greenland_P3','2009_Antarctica_DC8', ...
      '2010_Greenland_DC8','2010_Greenland_P3','2010_Antarctica_DC8'}))
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer maximum range: 2 volt peak to peak; 10 dBm max power'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Record rate: variable'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Channels: 15\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer: Analog Devices Evaluation Board 9640 150 MSPS\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitization: 14 bits, stacked into 16 bit register (lowest bits dropped)\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Data rate: variable\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitization dynamic range perchannel (as power): 96.3 dB\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer platform: Multiple Linux PCs running Custom C++ Application\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer manufacturer: Analog Devices and Custom'));
  elseif any(strcmpi(param.season_name,{'2011_Greenland_P3','2011_Antarctica_DC8','2012_Greenland_P3', ...
      '2012_Antarctica_DC8','2013_Greenland_P3', '2013_Antarctica_P3', ...
      '2014_Greenland_P3','2014_Antarctica_DC8','2016_Antarctica_DC8','2017_Greenland_P3','2017_Antarctica_P3',...
      '2018_Greenland_P3','2018_Antarctica_DC8','2019_Greenland_P3','2019_Antarctica_GV'}))
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer maximum range: 2 volt peak to peak; 10 dBm max power'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Record rate: variable'));
    if any(strcmpi(param.season_name,{'2013_Greenland_P3','2019_Greenland_P3','2019_Antarctica_GV'}))
      digparams_val = cat(2,digparams_val, ...
        sprintf('Channels: 7\n'));
    else
      digparams_val = cat(2,digparams_val, ...
        sprintf('Channels: 15\n'));
    end
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer: NI PXIe-5761 250 MSPS max\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitization: 14 bits, stacked into 16 bit register (lowest bits dropped)\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Data rate: variable\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitization dynamic range perchannel (as power): 96.3 dB\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer platform: NI PXIe Windows PC running LabView\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer manufacturer: National Instruments'));
  elseif any(strcmpi(param.season_name,{'2015_Greenland_C130','2016_Greenland_P3'}))
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer maximum range: 2 volt peak to peak; 10 dBm max power'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Record rate: variable'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Channels: 2\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer: NI PXIe-5772 1.6 GSPS max\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitization: 12 bits, stacked into 16 bit register (lowest bits dropped)\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Data rate: variable\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitization dynamic range perchannel (as power): 96.3 dB\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer platform: NI PXIe Windows PC running LabView\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer manufacturer: National Instruments'));
  elseif any(strcmpi(param.season_name,{'2017_Antarctica_Basler'}))
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer maximum range: 2 volt peak to peak; 10 dBm max power'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Record rate: variable'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Channels: 8\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer: NI 5772 1600 MSPS max\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitization: 12 bits, stacked into 16 bit register (lowest bits dropped)\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Data rate: variable\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitization dynamic range perchannel (as power): 96.3 dB\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer platform: NI PXIe Windows PC running LabView\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer manufacturer: National Instruments'));
  else
    error('Unsupported season\n');
  end
elseif any(strcmp(sensor_type,{'kuband','snow'}))
  if any(strcmpi(param.season_name,{'2009_Greenland_P3','2009_Antarctica_DC8', ...
      '2010_Greenland_DC8','2010_Greenland_P3','2010_Antarctica_DC8','2011_Greenland_P3','2011_Antarctica_DC8'}))
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer maximum range: 2 volt peak to peak; 10 dBm max power'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Record rate: variable'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Channels: 1\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer: Analog Devices Evaluation Board 9640 150 MSPS\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitization: 14 bits, stacked into 16 bit register (lowest bits dropped)\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Data rate: variable\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitization dynamic range perchannel (as power): 96.3 dB\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer platform: Linux PC running IDL application\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer manufacturer: Analog Devices and Custom'));
  elseif any(strcmpi(param.season_name,{'2012_Greenland_P3', ...
      '2012_Antarctica_DC8','2013_Greenland_P3', '2013_Antarctica_P3', ...
      '2014_Greenland_P3','2014_Antarctica_DC8','2015_Greenland_C130','2016_Greenland_P3','2016_Antarctica_DC8','2017_Greenland_P3','2017_Antarctica_P3','2018_Greenland_P3','2018_Alaska_SO','2018_Antarctica_DC8','2019_Greenland_P3','2019_Arctic_GV','2019_Antarctica_GV'}))
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer maximum range: 2 volt peak to peak; 10 dBm max power'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Record rate: variable'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Channels: 1\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer: NI PXIe-5761\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitization: 14 bits, stacked into 16 bit register (lowest bits dropped)\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Data rate: variable\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitization dynamic range perchannel (as power): 96.3 dB\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer platform: NI PXIe Windows PC running LabView\n'));
    digparams_val = cat(2,digparams_val, ...
      sprintf('Digitizer manufacturer: National Instruments'));
  else
    error('Unsupported season\n');
  end
end

netcdf.putAtt(ncid,varid,'digital',digparams_val);

%% For antenna parameters
antparams_val = sprintf('ANTENNA PARAMETERS\n');
antparams_val = cat(2,antparams_val, ...
  sprintf('Platform: -\n'));
antparams_val = cat(2,antparams_val, ...
  sprintf('Velocity range: ~125 m/s\n'));
antparams_val = cat(2,antparams_val, ...
  sprintf('Maximum Doppler frequency: \n'));
if strcmp(sensor_type,'accum')
  if any(strcmpi(param.season_name,{'2010_Greenland_P3', ...
      '2011_Greenland_P3','2012_Greenland_P3', ...
      '2013_Greenland_P3', '2013_Antarctica_P3', ...
      '2014_Greenland_P3','2016_Antarctica_DC8'}))
    antparams_val = cat(2,antparams_val, ...
      sprintf('Antennas: 2 along-track x 4 cross-track elliptical dipole array\n'));
  elseif any(strcmpi(param.season_name,{'2017_Greenland_P3','2017_Antarctica_P3'}))
    antparams_val = cat(2,antparams_val, ...
      sprintf('Antennas: 2 along-track x 4 cross-track elliptical dipole array (forward four for Tx, aft four for Rx)\n'));
  elseif any(strcmpi(param.season_name,{'2018_Greenland_P3'}))
    antparams_val = cat(2,antparams_val, ...
      sprintf('Antennas: 2 along-track x 4 cross-track elliptical dipole array (all combined for Tx and Rx)\n'));
  else
    error('Unsupported season\n');
  end
elseif strcmp(sensor_type,'kuband')
  if any(strcmpi(param.season_name,{'2009_Greenland_P3','2009_Antarctica_DC8', ...
      '2010_Greenland_DC8','2010_Greenland_P3','2010_Antarctica_DC8', ...
      '2011_Greenland_P3','2011_Antarctica_DC8','2012_Greenland_P3', ...
      '2012_Antarctica_DC8','2013_Greenland_P3', '2013_Antarctica_P3', ...
      '2014_Greenland_P3','2014_Antarctica_DC8','2015_Greenland_C130','2016_Greenland_P3','2016_Antarctica_DC8'}))
    antparams_val = cat(2,antparams_val, ...
      sprintf('Antennas: 20 dB standard gain horn antenna model PE 9854-20\n'));
  else
    error('Unsupported season\n');
  end
elseif strcmp(sensor_type,'rds')
  if any(strcmpi(param.season_name,{'2009_Greenland_P3', ...
      '2010_Greenland_P3', ...
      '2011_Greenland_P3','2012_Greenland_P3', ...
      '2013_Greenland_P3', '2013_Antarctica_P3', ...
      '2014_Greenland_P3','2017_Greenland_P3','2017_Antarctica_P3','2018_Greenland_P3','2019_Greenland_P3'}))
    antparams_val = cat(2,antparams_val, ...
      sprintf('Antennas: Three loaded dipole arrays with 15 elements: 4 left wing, 7 center wing, 4 right wing\n'));
    antparams_val = cat(2,antparams_val, ...
      sprintf('Antennas: Byers et al., IEEE Tran. Instruments and Methods, May 2012\n'));
  elseif any(strcmpi(param.season_name,{'2009_Antarctica_DC8', ...
      '2010_Greenland_DC8','2010_Antarctica_DC8', ...
      '2011_Antarctica_DC8','2012_Antarctica_DC8'}));
    antparams_val = cat(2,antparams_val, ...
      sprintf('Antennas: Loaded dipole array with 5 elements\n'));
    antparams_val = cat(2,antparams_val, ...
      sprintf('Antennas: Allen et al., IEEE Aerospace and Electronic Systems Magazine, March 2012\n'));
  elseif any(strcmpi(param.season_name,{'2014_Antarctica_DC8','2016_Antarctica_DC8','2018_Antarctica_DC8'}))
    antparams_val = cat(2,antparams_val, ...
      sprintf('Antennas: Loaded dipole array with 6 elements\n'));
    antparams_val = cat(2,antparams_val, ...
      sprintf('Antennas: Custom built 165-215 MHz antenna with matching network\n'));
  elseif any(strcmpi(param.season_name,{'2015_Greenland_C130','2016_Greenland_P3'}))
    antparams_val = cat(2,antparams_val, ...
      sprintf('Antennas: Two custom CReSIS Vivaldi atennas\n'));
    antparams_val = cat(2,antparams_val, ...
      sprintf('Antennas: \n'));
  elseif any(strcmpi(param.season_name,{'2017_Antarctica_Basler'}))
    antparams_val = cat(2,antparams_val, ...
      sprintf('Antennas: Eight custom CReSIS dipole antennas\n'));
    antparams_val = cat(2,antparams_val, ...
      sprintf('Antennas: Custom built 150-600 MHz antenna with matching network\n'));
  elseif any(strcmpi(param.season_name,{'2019_Antarctica_GV'}))
    antparams_val = cat(2,antparams_val, ...
      sprintf('Antennas: Four custom CReSIS U-slot patch antennas\n'));
    antparams_val = cat(2,antparams_val, ...
      sprintf('Antennas: Custom built 236-254 MHz antenna with impedence matching network\n'));
  else
    error('Unsupported season\n');
  end
elseif strcmp(sensor_type,'snow')
  if any(strcmpi(param.season_name,{'2009_Greenland_P3', ...
      '2010_Greenland_P3','2010_Antarctica_DC8', ...
      '2011_Greenland_P3','2011_Antarctica_DC8','2012_Greenland_P3', ...
      '2012_Antarctica_DC8','2013_Greenland_P3', '2013_Antarctica_P3', ...
      '2014_Greenland_P3','2014_Greenland_DC8','2014_Antarctica_DC8',...
      '2016_Greenland_P3','2016_Antarctica_DC8','2017_Greenland_P3',...
      '2017_Antarctica_P3','2018_Greenland_P3','2018_Antarctica_DC8','2019_Greenland_P3'}))
    antparams_val = cat(2,antparams_val, ...
      sprintf('Antennas: ETS Lindgren TEM horn antenna model ETS 3115\n'));
  elseif any(strcmpi(param.season_name,{'2019_Arctic_GV','2019_Antarctica_GV'}))
    antparams_val = cat(2,antparams_val, ...
      sprintf('Antennas: A-info LB-20180-N\n'));
  elseif any(strcmpi(param.season_name,{'2009_Antarctica_DC8'}))
    antparams_val = cat(2,antparams_val, ...
      sprintf('Antennas: Pasternack PE9861-15\n'));
  elseif any(strcmpi(param.season_name,{'2010_Greenland_DC8'}))
    antparams_val = cat(2,antparams_val, ...
      sprintf('Antennas: Q-Par Angus WBH2-24S\n'));
  elseif any(strcmpi(param.season_name,{'2015_Greenland_C130'}))
    antparams_val = cat(2,antparams_val, ...
      sprintf('Antennas: Custom CReSIS Vivaldi Antenna fed with 12:1 power divider, only inner 8 elements used\n'));
  elseif any(strcmpi(param.season_name,{'2018_Alaska_SO'}))
    antparams_val = cat(2,antparams_val, ...
      sprintf('Antennas: Q-Par Angus WBH2-18 (TX) and Steatite Q-Par QWH-SL--2-18-S-HG-R (RX)\n'));
  else
    error('Unsupported season\n');
  end
end
antparams_val = cat(2,antparams_val, ...
  sprintf('Antenna centerline offset: Variable\n'));
antparams_val = cat(2,antparams_val, ...
  sprintf('Nadir crosstrack lobe: Variable\n'));
antparams_val = cat(2,antparams_val, ...
  sprintf('First cross track lobe: Variable\n'));
antparams_val = cat(2,antparams_val, ...
  sprintf('Nadir alongtrack is controlled by processing'));

netcdf.putAtt(ncid,varid,'antenna',antparams_val);

%% For processing paramters

procparams_val = sprintf('PROCESSING PARAMETERS\n');
if isfield(data,'param_qlook')
  procparams_val = cat(2,procparams_val, ...
    sprintf('Mode name: qlook (unfocussed SAR/coherent averaging/stacking)\n'));
  ft_wind = char(data.param_qlook.radar.wfs(1).ft_wind);
else
  procparams_val = cat(2,procparams_val, ...
    sprintf('Mode name: SAR\n'));
  ft_wind = char(proc_param.radar.wfs(1).ft_wind);
end
procparams_val = cat(2,procparams_val, ...
  sprintf('Goal: -\n'));
procparams_val = cat(2,procparams_val, ...
  sprintf('Filtering: No additional\n'));
procparams_val = cat(2,procparams_val, ...
  sprintf('Range compression: Standard pulse compression\n'));

if any(strcmp(sensor_type,{'accum','rds'}))
  procparams_val = cat(2,procparams_val, ...
    sprintf('Range compression gain: Standard with "%s" freq-window and %.1f Tukey time-window\n', ft_wind, param.radar.wfs(1).tukey));
elseif any(strcmp(sensor_type,{'kuband','snow'}))
  procparams_val = cat(2,procparams_val, ...
    sprintf('Range compression gain: Standard FFT with "%s" freq-window\n', ft_wind));
end

if isfield(data,'param_qlook')
  procparams_val = cat(2,procparams_val, ...
    sprintf('Coherent stacking: Unfocused SAR %d lines\n', length(proc_param.qlook.B_filter)));
  procparams_val = cat(2,procparams_val, ...
    sprintf('Incoherent averaging: %d\n', ...
    data.param_qlook.qlook.inc_dec));
else
  procparams_val = cat(2,procparams_val, ...
    sprintf('Coherent stacking: SAR Processing\n'));
  procparams_val = cat(2,procparams_val, ...
    sprintf('Incoherent averaging: [%d %d]\n', ...
    length(data.param_array.array.line_rng), ...
    length(data.param_array.array.bin_rng)));
end
procparams_val = cat(2,procparams_val, ...
  sprintf('Final trace rate: %d\n'), mean(diff(data.GPS_time)));
along_track = geodetic_to_along_track(data.Latitude,data.Longitude,data.Elevation);
procparams_val = cat(2,procparams_val, ...
  sprintf('Typical trace spacing: %d', mean(diff(along_track))));

netcdf.putAtt(ncid,varid,'processing',procparams_val);

%% For reference

netcdf.putAtt(ncid,varid,'references',sprintf('F. Rodriguez-Morales et al., Advanced Multi-Frequency Radar Instrumentation for Polar Research, IEEE Transactions on Geoscience and Remote Sensing 2013'));


% %% Reference to the original file
% fileattrib(in_nc_fn,'+w');
% netcdf.putAtt(ncid,varid,'featureType','timeSeries');
% netcdf.putAtt(ncid,varid,'location','JKB');
% netcdf.putAtt(ncid,varid,'source','airborne ice penetrating radar');
% netcdf.putAtt(ncid,varid,'data_version','JUNE152013');
% netcdf.putAtt(ncid,varid,'positioning','post processed Novatel PPP SPAN GPS/INS (OEM-4/ImARFSAS)');
% netcdf.putAtt(ncid,varid,'title','IceBridge HiCARS2 L1B Echo Strength Profile');
% netcdf.putAtt(ncid,varid,'granule_id','Data_20110329_02_002');
% netcdf.putAtt(ncid,varid,'instrument','HiCARS 2');
% netcdf.putAtt(ncid,varid,'institution',['Institute for Geophysics',char(10)',...
%                                         'Jackson School for Geoscience',char(10)',...
%                                         'University of Texas at Austin']);
% netcdf.putAtt(ncid,varid,'funding','This line was funded as part of NASA');
% netcdf.putAtt(ncid,varid,'investigators','D.D.Blankenship');
% netcdf.putAtt(ncid,varid,'history','Friday Sep 13 15:44:40 2013');
%
% netcdf.putAtt(ncid,varid,'max_latitude_bound',-77.6);
% netcdf.putAtt(ncid,varid,'min_latitude_bound',-77.9);
% netcdf.putAtt(ncid,varid,'max_longitude_bound',170);
% netcdf.putAtt(ncid,varid,'min_longitude_bound',168);
% netcdf.putAtt(ncid,varid,'min_time_bound','2012-11-13T01:18:11 UTC');
% netcdf.putAtt(ncid,varid,'max_time_bound','2012-11-13T01:35:11 UTC');
%
% netcdf.putAtt(ncid,varid,'rfparams',['RF PARAMETERS',char(10)',...
%                                      'Center Frequency: 60 MHz',char(10)',...
%                                      'Center Wavelength in Air: 5m',char(10)',...
%                                      'Peak power: 67 dBm at T/R switch',char(10)',...
%                                      'Chirp: 52.5 MHz to 67.5 MHz, 1 microsecond, linear FM',char(10)',...
%                                      'PRF: 6400 Hz',char(10)',...
%                                      'TX duty cycle: 0.64 percent',char(10)',...
%                                      'Transmitters: two stage; first stage BT1000-Gamma-T solid state;'...
%                                      'second stage TUD IV vacuum tube based system: 57 dBm (BT1000-Gamma-T) 67 dBm (HPPA)',char(10)',...
%                                      'Receiver path: Downcoversion with 70MHz local oscilator to 10 MHz center frequency base band'...
%                                      'on low gain (1 dB gain) and high gain (40 dB gain) channels',char(10)',...
%                                      'Reiceiver linear dynamic range: 85 dB (between 2 receivers with ~50 dB range)',char(10)',...
%                                      'TX/RX mode: via same antenna pair with passive T/R switch',char(10)',...
%                                      'Transmitter manufactorers: (first stage) Tomco Technologies (2008)',char(10)',...
%                                      'Receiver manufactorer: University of Texas Institue for Geophysics, 2010',char(10)',...
%                                      '']);
%
% netcdf.putAtt(ncid,varid,'digital',['DIGITAL PARAMETERS',char(10)',...
%                                      'Record Duration: wf 1: 64 microseconds; wf 2: ???',char(10)',...%%%records.settings.wfs(wf).num_sam
%                                      'Sample rate: 50 MHz',char(10)',...%%%radar.fs
%                                      'Digitizer maximum range: 2 volt peak to peak; 10 dBm max power',char(10)',...%%% system-dependent
%                                      'Record rate: 200 Hz (32 onboard stacks)',char(10)',...
%                                      'Channels: 15',char(10)',...%%% system-dependent
%                                      'Digitizer: NI PXIe-5761',char(10)',...%%% system-dependent
%                                      'Digitization: 14 bits, stacked into 16 bit register (lowest bits dropped)',char(10)',...%%% system-dependent
%                                      'Data rate: %f MB/sec',char(10)',...
%                                      'Digitization dynamic range perchannel (as power): 96.3 dB',char(10)',...%%%
%                                      'Digitizer platform: NI PXIe Windows PC running LabView',char(10)',...%%% system-dependent
%                                      'Digitizer manufacturer: National Instruments''',char(10)',...%%% system-dependent
%                                      '']);
%
% netcdf.putAtt(ncid,varid,'antenna',['ANTENNA PARAMETERS',char(10)',...
%                                      'Platform:',char(10)',...
%                                      'Velocity range',char(10)',...
%                                      'Maximum Doppler frequency: 48 Hz',char(10)',...
%                                      'Antennas: Two-dipole radar',char(10)',...
%                                      'Antennas: Two-element-flat-plate dipole',char(10)',...
%                                      'Antenna centerline offset',char(10)',...
%                                      'Nadir crosstrack lobe',char(10)',...
%                                      'First cross track lobe',char(10)',...
%                                      'Nadir alongtrack with no SAR',char(10)',...
%                                      '']);
%
% netcdf.putAtt(ncid,varid,'processing',['PROCESSING PARAMETERS',char(10)',...
%                                      'Mode name:',char(10)',...
%                                      'Goal:',char(10)',...
%                                      'Filtering:',char(10)',...
%                                      'Range compression:',char(10)',...
%                                      'Range compression gain:',char(10)',...
%                                      'Coherent stacking: SAR Processing',char(10)',...%%%
%                                      'Incoherent averaging',char(10)',...% length(data.param_array.array.rline_rng)*length(data.param_array.array.bin_rng)
%                                      'Final trace rate',char(10)',...% GPS_time
%                                      'Typical trace spacing',char(10)',...% geodetic_to_along_track
%                                      '']);
%
% netcdf.putAtt(ncid,varid,'references',['Peters,']);

%ncdisp(in_nc_fn);
netcdf.close(ncid);

end