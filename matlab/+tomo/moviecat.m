% Concatenate movie matrices generated by create_movie
%
% Author: Victor Berger

params = read_param_xls(ct_filename_param('rds_param_2014_Greenland_P3.xls'),'20140325_07','post');
params.cmd.generic = 1;
params.cmd.frms = 1:4;

options.videoPath = 'movies_HQ';
% options.videoFormat = 'MPEG-4';

param = params(1);
frm_idx = param.cmd.frms(1);
options.videoName = sprintf('Movie_%s_%03d',param.day_seg, frm_idx);
options.videoPathTMP = ct_filename_out(param, options.videoPath);
options.frameRate = 30;
options.multi_parts = true;

try
  v = VideoWriter(strcat(fullfile(options.videoPathTMP, options.videoName), ...
    '_to_', num2str(params.cmd.frms(end))), ...
    options.videoFormat);
  try
    v.Quality = 100;
  catch ME
  end
  try
    v.LosslessCompression = true;
  catch ME
  end
catch ME
  warning('The selected video format is not supported. Using .avi instead.');
  warning('MPEG-4: only systems with Windows 7 and later, or Mac OS X 10.7 and later.');
  v = VideoWriter(strcat(fullfile(options.videoPathTMP, options.videoName), ...
    '_to_', num2str(params.cmd.frms(end))));
end
v.FrameRate = options.frameRate;
fprintf('\nWriting video to \n%s  (%s)\n', strcat(fullfile(options.videoPathTMP, options.videoName), ...
  '_to_', num2str(params.cmd.frms(end))), datestr(now));
open(v);

for param_idx = 1:length(params)
  param = params(param_idx);
  if ~isfield(param.cmd,'generic') || iscell(param.cmd.generic) ...
      || ischar(param.cmd.generic) || ~param.cmd.generic
    continue;
  end
  
  if ~options.multi_parts
    for frm_idx = param.cmd.frms
      options.videoName = sprintf('Movie_%s_%03d',param.day_seg, frm_idx);
      options.videoPathTMP = ct_filename_out(param, options.videoPath);
      
      fn = strcat(fullfile(options.videoPathTMP, options.videoName), '.mat');
      
      try
        tic
        moviedata = load(fn);
        fprintf('\nLoaded movie %s, took %.2f sec.', options.videoName, toc);
      catch ME
        fprintf('\nError: failed to load %s, check...', options.videoName);
      end
      
      for slice_idx = 1:length(moviedata.movie_mat)
        writeVideo(v, moviedata.movie_mat{slice_idx});
      end
      
      fprintf('\nDone writing frame %d of video', frm_idx);
    end
    
    
  else % Multi-parts video
    for frm_idx = param.cmd.frms
      options.videoName = sprintf('Movie_%s_%03d',param.day_seg, frm_idx);
      options.videoPathTMP = ct_filename_out(param, options.videoPath);
      options.parts_dir = fullfile(options.videoPathTMP);
      fprintf('\n\nWorking on frame %s, found parts: \n', sprintf('Movie_%s_%03d',param.day_seg, frm_idx));
      parts_list = ls(fullfile(options.parts_dir, sprintf('Movie_%s_%03d_part_*',param.day_seg, frm_idx)));
      disp(parts_list)
      parts_list = dir(fullfile(options.parts_dir, sprintf('Movie_%s_%03d_part_*',param.day_seg, frm_idx)));
      
      for partn = 1:size(parts_list, 1)
        part_fn = fullfile(options.parts_dir, sprintf('Movie_%s_%03d_part_%d.mat',param.day_seg, frm_idx, partn));
        try
          tic
          moviedata = load(part_fn);
          fprintf('\nLoaded movie %s, part %d, took %.2f sec.', options.videoName, partn, toc);
        catch ME
          fprintf('\nError: failed to load %s, check...', part_fn);
        end
        
        for slice_idx = 1:length(moviedata.movie_mat)
          writeVideo(v, moviedata.movie_mat{slice_idx});
        end
        
      end
      
      fn = strcat(fullfile(options.videoPathTMP, options.videoName), '.mat');
      
      fprintf('\nDone writing frame %d of video', frm_idx);
    end
    
  end
  
  close(v);
  fprintf('\n\n$$$ Done writing video $$$\n');
  
end