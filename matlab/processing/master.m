function ctrl_chain = master(params,param_override)
% ctrl_chain = master(params,param_override)
%
% Function for processing radar depth sounder data. This function calls all the
% individual processing functions.
%
% IT IS TYPICALLY RUN FROM run_master.m
%
% THIS MASTER RUNS FROM THE PARAM GENERATED BY read_param_xls.m,
% which reads in an excel spread sheet
% (e.g. RADAR_param_YYYY_Mission_Aircraft.xls).
%
% params = struct array of parameters read from read_param_xls
% param_override = parameter structure whos fields will override
%   all fields in params and gRadar (typically used to set the scheduler
%   parameters for this particular run)
%
% gRadar = GLOBAL variable (parameters here are not present in params),
%   These parameters are added to each struct in the params array
%
% Please make a local copy of the excel spread sheet and run_master.
%
% Authors: Brady Maasen, John Paden
%
% See also: run_master

%% Input checks
% =====================================================================

global gRadar;
if exist('param_override','var')
  param_override = merge_structs(gRadar,param_override);
else
  param_override = gRadar;
end

%% Create chains for each segment
% =====================================================================
ctrl_chain = {};
for param_idx = 1:length(params)
  param = params(param_idx);
  
  %% Segment: Input checks
  % =====================================================================
  
  if ~isfield(param.cmd,'records') || isempty(param.cmd.records)
    param.cmd.records = 0;
  end
  
  if ~isfield(param.cmd,'qlook') || isempty(param.cmd.qlook)
    param.cmd.qlook = 0;
  end
  
  if ~isfield(param.cmd,'sar') || isempty(param.cmd.sar)
    param.cmd.sar = 0;
  end
  
  if ~isfield(param.cmd,'array') || isempty(param.cmd.array)
    param.cmd.array = 0;
  end
  
  if ~isfield(param.cmd,'generic') || isempty(param.cmd.generic)
    param.cmd.generic = 0;
  end

  %% Segment: Populate chain of batch (ctrl) jobs
  % =====================================================================
  new_chain = {};
  
  if param.cmd.records
    % Remaining commands cannot run without records and frames files so
    % this function is run now.
    records_create(param,param_override);
    tmp_param = merge_structs(param, param_override);
    try
      % If manual frame mode specified, then wait until the user chooses
      % the frames before continuing
      if tmp_param.records.frames.mode == 1
        warning('Since manual frame mode is being used and some commands (e.g. qlook, sar, and array) require framing information to be known before the command chains can be created, please finish creating frames for this segment and then run "dbcont" at the command prompt.');
        keyboard
      end
    end
  end
  if param.cmd.qlook
    chain = qlook(param,param_override);
    new_chain = cat(2,new_chain,chain);
  end
  if param.cmd.sar
    chain = sar(param,param_override);
    new_chain = cat(2,new_chain,chain);
  end
  if param.cmd.array
    chain = array(param,param_override);
    new_chain = cat(2,new_chain,chain);
  end
  
  if isfield(param.cmd,'generic') && (ischar(param.cmd.generic) || iscell(param.cmd.generic))
    % This supports different permutations for running custom commands
    if ischar(param.cmd.generic)
      % If generic column is string, then enclose in cell
      param.cmd.generic = {param.cmd.generic};
    end
    for generic_idx = 1:length(param.cmd.generic)
      if iscell(param.cmd.generic{generic_idx})
        % Type 1: Cell Array with rename
        %   Field 1: command to run
        %   Field 2: {worksheets to load, what to rename the worksheet to}
        % Type 2: cell array
        %   field 1: command to run
        %   field 2: worksheet to load
        generic_func = param.cmd.generic{generic_idx}{1};
        read_param = struct('update_existing_only',true);
        tmp_param = read_param_xls_generic(param.fn,param.cmd.generic{generic_idx}{2},param,read_param);
      elseif ischar(param.cmd.generic{generic_idx})
        % Type 3: String
        %   String contains command to run
        generic_func = param.cmd.generic{generic_idx};
        tmp_param = param;
      else
        error('%s param.cmd.generic{%d} must be cell or string.', param.day_seg, generic_idx);
      end
      generic_fh = str2func(generic_func);
      if strcmp(generic_func,'analysis')
        % Generic functions that produce batch chains
        chain = generic_fh(tmp_param,param_override);
        new_chain = cat(2,new_chain,chain);
      else
        % Everything else is assumed to just run rather than produce a
        % batch chain.
        generic_fh(tmp_param,param_override);
      end
    end
  end
  
  %% Segment: Add chain to list of chains
  % =====================================================================
  if ~isempty(new_chain)
    ctrl_chain{end+1} = new_chain;
  end
end
